# Importing all modules
import cv2
import numpy as np
import math

path = r'C:\Users\yehon\Videos\Twitch\M&Ms-Pile.jpg'
image = cv2.imread(path)
lower1 = np.array([36,50,70])
upper1 = np.array([89,255,255]) # (These ranges will detect Yellow)
lower2 = np.array([90,50,70])
upper2 = np.array([128,255,255])
lower3 = np.array([159,50,70])
upper3 = np.array([180,255,255])
lower4 = np.array([10,50,70])
upper4 = np.array([24,255,255])
lower5 = np.array([10,100,20])
upper5 = np.array([20,255,200])
lower6 = np.array([110,0,0])
upper6 = np.array([130,255,255])
limit1 = [lower1,upper1]
limit2 = [lower2,upper2]
limit3 = [lower3,upper3]
limit4 = [lower4,upper4]
limit5 = [lower5,upper5]
limit6 = [lower6,upper6]
numberofmnms = 0


limits = [limit1,limit2,limit3,limit4,limit5]
# Capturing webcam footage

id=0
numberofcirc =0

#  Masking the image to find our color
for x in limits:
    img1 = cv2.cvtColor(image, cv2.COLOR_BGR2HSV) # Converting BGR image to HSV format
    mask = cv2.inRange(img1,x[0],x[1]) # Masking the image to find our color

    # boop = cv2.cvtColor(img1,cv2.COLOR_HSV2BGR)
    # cv2.imshow("hi",boop)
#     img = cv2.cvtColor(boop,cv2.COLOR_BGR2GRAY)
# cv2.imshow("asd",img)
    output = image.copy()
    circles = cv2.HoughCircles(mask, cv2.HOUGH_GRADIENT, 1.3, 100)
    # If some circle is found
    if circles is not None:
       # Get the (x, y, r) as integers
       circles = np.round(circles[0, :]).astype("int")
       print(circles)
       # loop over the circles
       for (x, y, r) in circles:
            if(r*r*math.pi>9000 and r*r*math.pi<98000 ):
                numberofcirc+=1
                cv2.circle(image, (x, y), r, (0, 255, 0), 2)
    
    # mask_contours, hierarchy = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) # Finding contours in mask image
    id+=1
    cv2.imshow("mask image"+str(id), mask) # Displaying mask image
    # cv2.imshow("dogg"+str(id),mask_contours)
    # # Finding position of all contours

    # idofrows=0
    # for roe in mask:
    #     idofcols=0
    #     idofrows+=1
    #     for wade in roe:
    #      print(str(idofcols)+str(idofrows))
    #      if(wade):
    #              diffdaig = (diagonal(mask,idofrows,idofcols,1,1)-diagonal(mask,idofrows,idofcols,-1,1))+(diagonal(mask,idofrows,idofcols,1,-1)-diagonal(mask,idofrows,idofcols,-1,-1))
    #              if(diffdaig<10):
    #                  numberofmnms+=1
    #                  image = cv2.circle(image,(idofcols,idofrows),abs((diagonal(mask,idofrows,idofcols,1,1))),(255,0,0),10)
    #     idofcols+=1
# Set our filtering parameters
# Initialize parameter setting using cv2.SimpleBlobDetector
# params = cv2.SimpleBlobDetector_Params()
 
# # Set Area filtering parameters
# params.filterByArea = True
# params.minArea = 100
 
# # Set Circularity filtering parameters
# params.filterByCircularity = False
# params.minCircularity = 0.9
 
# # Set Convexity filtering parameters
# params.filterByConvexity = False
# params.minConvexity = 0.2
     
# # Set inertia filtering parameters
# params.filterByInertia = False
# params.minInertiaRatio = 0.01
 
# # Create a detector with the parameters
# detector = cv2.SimpleBlobDetector_create(params)
     
# # Detect blobs
# keypoints = detector.detect(image)
 
# # Draw blobs on our image as red circles
# blank = np.zeros((1, 1))
# blobs = cv2.drawKeypoints(image, keypoints, blank, (0, 0, 255),
#                           cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
 
# number_of_blobs = len(keypoints)
# text = "Number of Circular Blobs: " + str(len(keypoints))
# cv2.putText(blobs, text, (20, 550),
#             cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 100, 255), 2)
 
# # Show blobs
# cv2.imshow("Filtering Circular Blobs Only", blobs)
# cv2.waitKey(0)
# scale_percent = 70 # percent of original size
# width = int(image.shape[1] * scale_percent / 100)
# height = int(image.shape[0] * scale_percent / 100)
# dim = (width, height)
  
# # resize image
# resized = cv2.resize(image, dim, interpolation = cv2.INTER_AREA)
 
    
print(str(numberofcirc))
cv2.imshow("window", image) # Displaying webcam image
#  print(numberofmnms)
cv2.waitKey(0)



